class Solution {
    public int numIslands(char[][] grid) {
        int result = 0;
        for (int i = 0; i < grid.length; ++i) {
            for (int j = 0; j < grid[i].length; ++j) {
                if (grid[i][j] == '0') {
                    continue;
                }
                ++result;
                dfs(i, j, grid);
            }
        }
        return result;
    }
    
    private void dfs(int i, int j, char[][] grid) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[i].length || grid[i][j] == '0') {
            return;
        }
        
        grid[i][j] = '0';
        dfs(i - 1, j, grid);
        dfs(i + 1, j, grid);
        dfs(i, j - 1, grid);
        dfs(i, j + 1, grid);
    }
    
    private void bfs(int i, int j, char[][] grid) {
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[] {i, j});
        
        while (!queue.isEmpty()) {
            int[] last = queue.poll();
            if (grid[last[0]][last[1]] == '0') {
                continue;
            }
            
            grid[last[0]][last[1]] = '0';
            
            if (last[0] - 1 >= 0 && grid[last[0] - 1][last[1]] == '1') {
                queue.offer(new int[] {last[0] - 1, last[1]});
            }
            
            if (last[0] + 1 < grid.length && grid[last[0] + 1][last[1]] == '1') {
                queue.offer(new int[] {last[0] + 1, last[1]});
            }
            
            if (last[1] - 1 >= 0 && grid[last[0]][last[1] - 1] == '1') {
                queue.offer(new int[] {last[0], last[1] - 1});
            }
            
            if (last[1] + 1 < grid[0].length && grid[last[0]][last[1] + 1] == '1') {
                queue.offer(new int[] {last[0], last[1] + 1});
            }
        }
    }
}

/**
["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"], ["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"], ["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],     ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]
**/